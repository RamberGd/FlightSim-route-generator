# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(470, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.generatebutton = QtWidgets.QPushButton(self.centralwidget)
        self.generatebutton.setGeometry(QtCore.QRect(170, 70, 271, 101))
        self.generatebutton.setObjectName("generatebutton")
        self.output = QtWidgets.QTextBrowser(self.centralwidget)
        self.output.setGeometry(QtCore.QRect(30, 200, 411, 361))
        self.output.setObjectName("output")
        self.airport = QtWidgets.QLineEdit(self.centralwidget)
        self.airport.setGeometry(QtCore.QRect(30, 70, 113, 20))
        self.airport.setObjectName("airport")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(30, 30, 413, 22))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.mindistance = QtWidgets.QLineEdit(self.layoutWidget)
        self.mindistance.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.mindistance.setObjectName("mindistance")
        self.horizontalLayout.addWidget(self.mindistance)
        self.maxdistance = QtWidgets.QLineEdit(self.layoutWidget)
        self.maxdistance.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.maxdistance.setObjectName("maxdistance")
        self.horizontalLayout.addWidget(self.maxdistance)
        self.numberofresults = QtWidgets.QLineEdit(self.layoutWidget)
        self.numberofresults.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.numberofresults.setObjectName("numberofresults")
        self.horizontalLayout.addWidget(self.numberofresults)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(30, 100, 109, 65))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.departureradio = QtWidgets.QRadioButton(self.layoutWidget1)
        self.departureradio.setObjectName("departureradio")
        self.verticalLayout.addWidget(self.departureradio)
        self.arrivalradio = QtWidgets.QRadioButton(self.layoutWidget1)
        self.arrivalradio.setObjectName("arrivalradio")
        self.verticalLayout.addWidget(self.arrivalradio)
        self.noneradio = QtWidgets.QRadioButton(self.layoutWidget1)
        self.noneradio.setChecked(True)
        self.noneradio.setObjectName("noneradio")
        self.verticalLayout.addWidget(self.noneradio)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 470, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.generatebutton.clicked.connect(self.generator)
        MainWindow.setStatusBar(self.statusbar)
        MainWindow.setFixedSize(470, 600)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
    def generator(self):
        try:
            min_dist = int(self.mindistance.text())
            max_dist = int(self.maxdistance.text())
            number_of_results = int(self.numberofresults.text())    
        except:
            self.output.append("Please, enter valid value(s)")
            return
        airport = self.airport.text()
        airport = airport.upper()
        
        combinations = pd.read_csv('D:\Coding\Projects\MSFS routes generator\combinations_final.csv')
        
        
        if self.noneradio.isChecked():
            self.output.clear()
            if min_dist >= max_dist:
                self.output.append("max. distance value must be higher then min. distance")

            else:
                combinations_distance_only = combinations.loc[(combinations["distance"] >= int(min_dist)) & (combinations["distance"] <= int(max_dist))]
                tempdf = combinations_distance_only.sample(n = number_of_results)
                for s in range(number_of_results):
                    self.output.append('departure airport - ' + str(tempdf.iloc[s]['icao1']) + ", arrival airport - " + str(tempdf.iloc[s]['icao2']) + ", distance - " + str(tempdf.iloc[s]['distance']))
        
        
        elif self.departureradio.isChecked():
            self.output.clear()
            if min_dist >= max_dist:
                self.output.append("max. distance value must be higher then min. distance")
            else:
                combination_departure_icao = combinations.loc[(combinations["distance"] >= min_dist) & (combinations["distance"] <= max_dist) & (combinations["icao1"] == airport)]
                if number_of_results > len(combination_departure_icao):
                    number_of_results = int(len(combination_departure_icao))   
                    tempdf2 = combination_departure_icao.sample(n = number_of_results)
                else: 
                    tempdf2 = combination_departure_icao.sample(n = number_of_results)
                for s in range(number_of_results):
                    self.output.append('departure airport - ' + str(tempdf2.iloc[s]['icao1']) + ", arrival airport - " + str(tempdf2.iloc[s]['icao2']) + ", distance - " + str(tempdf2.iloc[s]['distance']))
        if self.arrivalradio.isChecked():
            self.output.clear()
            if min_dist >= max_dist:
                self.output.append("max. distance value must be higher then min. distance")
    
            else:
  
                combination_arrival_icao = combinations.loc[(combinations["distance"] >= min_dist) & (combinations["distance"] <= max_dist) & (combinations["icao2"] == airport)]
    
                if number_of_results > len(combination_arrival_icao):
                    number_of_results = int(len(combination_arrival_icao))
       
                    tempdf_arr = combination_arrival_icao.sample(n = number_of_results)
                else: 
                    tempdf_arr = combination_arrival_icao.sample(n = number_of_results)


            for i in range(number_of_results):
                self.output.append("departure airport: " + str(tempdf_arr.iloc[i]['icao1']) + ", arrival airport: " + str(tempdf_arr.iloc[i]['icao2']) + ", distance: " + str(tempdf_arr.iloc[i]['distance'])) 
            
               
            
     
       
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("Route generator for Flight Simulatoion", "Route generator for Flight Simulatoion"))
        self.generatebutton.setText(_translate("MainWindow", "Generate"))
        self.airport.setPlaceholderText(_translate("MainWindow", "Airport"))
        self.mindistance.setPlaceholderText(_translate("MainWindow", "Min. distance"))
        self.maxdistance.setPlaceholderText(_translate("MainWindow", "Max. distance"))
        self.numberofresults.setPlaceholderText(_translate("MainWindow", "Number of results"))
        self.departureradio.setText(_translate("MainWindow", "Departure airport"))
        self.arrivalradio.setText(_translate("MainWindow", "Arrival airport"))
        self.noneradio.setText(_translate("MainWindow", "None"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
